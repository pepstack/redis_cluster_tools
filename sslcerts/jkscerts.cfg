################################################################
# 根据需要更改下面的配置值 !
# 生成的文件保存的目录为: genkeys.jkscerts.cfg
################################################################
# java 证书工具路径
JAVA_KEYTOOL="$JAVA_HOME/bin/keytool"

# 证书输出目录的名称 (总是和本配置文件相同的目录)
GENKEYS_DIR=genkeys.jkscerts

# 证书有效期
VALID_DAYS=365

# 密码长度
KEYPASS_LEN=6
################################################################

# 服务器证书库密码
serverstorepass=$(openssl rand -base64 "$KEYPASS_LEN")

# 客户端证书库密码 (不能与服务器相同)
clientstorepass=$(openssl rand -base64 "$KEYPASS_LEN")

# 服务器key密码
serverkeypass="$serverstorepass"

# 客户端key密码
clientkeypass="$clientstorepass"

# 服务器 DN
serverdname="C=CN,ST=SH,L=SH,O=mapaware,OU=dev,CN=mapaware.top"

# 客户端 DN
clientdname="C=CN,ST=SH,L=SH,O=mapaware,OU=dev,CN=mapaware.top"

################################################################
# 服务器证书库名称. 目前 jdk 仅仅自带了 JKS 格式的证书
serverkeystore="server.keystore"

# 服务器证书库别名
serverkeystorealias="server"

# 服务器信任证书库名称 (服务器信任证书库可以与服务器证书库相同)
# 客户端的公钥证书将导入到服务器信任证书库
servertrustkeystore="server_trust.keystore"

# 服务器信任证书库别名
servertrustkeystorealias="server_trust"

# 客户端证书库名称. 为了可以导入浏览器, 要求必须 PKCS12 格式
clientkeystore="client_keystore.p12"

# 客户端证书库别名
clientkeystorealias="client"

# 客户端信任证书库名称 (客户端信任证书库可以与客户端证书库相同)
# 服务器的公钥证书将导入到客户端信任证书库
clienttrustkeystore="client_trust.keystore"

# 客户端信任证书库别名
clienttrustkeystorealias="client_trust"
################################################################